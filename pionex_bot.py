import os
# 'requests' √© mantido pois 'python-binance' pode us√°-lo indiretamente.
# hmac e hashlib n√£o s√£o mais usados diretamente para assinatura da API da Binance,
# pois a biblioteca 'binance.client' lida com isso internamente.
import requests 
import json
from flask import Flask, request, jsonify
from datetime import datetime
import pytz
import traceback
import logging

# === BIBLIOTECAS E EXCE√á√ïES ESPEC√çFICAS DA BINANCE ===
from binance.client import Client 
from binance.exceptions import BinanceAPIException 

# === CONFIGURA√á√ÉO DO LOGGER ===
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# === CHAVES DE AMBIENTE (Carregadas do Render) ===
API_KEY = os.getenv("API_KEY") # Sua API Key da Binance
API_SECRET = os.getenv("API_SECRET") # Sua Secret Key da Binance
BASE_URL = os.getenv("BASE_URL") # Deve ser 'https://api.binance.com' para produ√ß√£o da Binance

# === INICIALIZA√á√ÉO DO CLIENTE DA BINANCE ===
# O objeto 'binance_client' √© a ponte para a API da Binance
binance_client = Client(API_KEY, API_SECRET, base_url=BASE_URL)

# === STATUS DO BOT ===
# Dicion√°rio para armazenar o status atual do bot, vis√≠vel na rota /status
status_data = {
    "status": "online",
    "ultimo_horario": None,
    "ultimo_sinal": None,
    "versao": "2.0_binance_final_oficial" # Identificador da vers√£o Binance
}

app = Flask(__name__)
# Define o fuso hor√°rio para os logs e status (Brasil)
tz = pytz.timezone('America/Sao_Paulo')

# === Fun√ß√£o: Consulta Saldo Dispon√≠vel em USDT na Binance ===
def get_balance_usdt() -> float:
    try:
        logger.info("üîÑ Consultando saldo USDT dispon√≠vel na Binance...")
        # Usa o m√©todo 'get_asset_balance' da biblioteca python-binance
        balances = binance_client.get_asset_balance(asset='USDT')
        
        # Pega o saldo 'livre' (free) para uso em ordens
        saldo = float(balances.get('free', 0.0)) 
        
        logger.info(f"üí∞ Saldo dispon√≠vel em USDT na Binance: {saldo:.8f}")
        return saldo

    except BinanceAPIException as e:
        # Tratamento de erros espec√≠ficos da API da Binance (ex: -2015 para API Key inv√°lida/permiss√£o)
        logger.error(f"‚ùå Erro da API Binance ao consultar saldo: C√≥digo {e.code}, Mensagem: {e.message}")
        return 0.0
    except Exception as e:
        # Tratamento de outros erros inesperados
        logger.error(f"‚ùå Erro inesperado ao consultar saldo na Binance: {e}")
        logger.error(traceback.format_exc()) # Imprime o stack trace completo do erro
        return 0.0

# === ROTA DE STATUS ===
# Rota GET para verificar o status e informa√ß√µes b√°sicas do bot
@app.route("/status", methods=["GET"])
def status():
    status_data["hora_servidor"] = datetime.now(tz).strftime("%Y-%m-%d %H:%M:%S")
    return jsonify(status_data)

# === ROTA PRINCIPAL: /pionexbot (Recebe Sinais) ===
# Esta rota continua com o nome 'pionexbot' por conveni√™ncia, mas a l√≥gica interna √© para Binance.
@app.route("/pionexbot", methods=["POST"])
def receive_signal():
    try:
        data = request.get_json(silent=True) 
        
        if not data:
            error_msg = "Nenhum dado JSON v√°lido recebido ou 'Content-Type' incorreto. Certifique-se de enviar 'application/json'."
            logger.error(f"‚ùå {error_msg}")
            return jsonify({"error": error_msg}), 400

        # Extrai os par√¢metros do sinal (esperamos "BTCUSDT", "buy", "sell")
        pair = data.get("pair") 
        signal = data.get("signal") 
        amount_str = data.get("amount") # Opcional: quantidade para a ordem

        logger.info(f"\nüîî Sinal recebido: Par='{pair}', Sinal='{signal}', Quantidade='{amount_str}'")

        if not pair or not signal:
            error_msg = "Par√¢metros obrigat√≥rios ausentes: 'pair' ou 'signal'."
            logger.error(f"‚ùå {error_msg}")
            return jsonify({"error": error_msg}), 400

        trade_amount = 0.0
        if amount_str:
            # Se 'amount' foi especificado no sinal
            try:
                trade_amount = float(amount_str)
                if trade_amount <= 0:
                    error_msg = "A quantidade 'amount' deve ser um valor positivo."
                    logger.error(f"‚ùå {error_msg}")
                    return jsonify({"error": error_msg}), 400
            except ValueError:
                error_msg = f"A quantidade '{amount_str}' n√£o √© um n√∫mero v√°lido."
                logger.error(f"‚ùå {error_msg}")
                return jsonify({"error": error_msg}), 400
        else:
            # Se 'amount' n√£o foi especificado, consulta o saldo dispon√≠vel em USDT para 'buy'
            # ou assume que 'trade_amount' ser√° definido para 'sell'
            logger.info("‚ÑπÔ∏è Quantidade n√£o especificada no sinal, consultando saldo USDT dispon√≠vel para a ordem de mercado (para compra)...")
            trade_amount = get_balance_usdt() # Isso s√≥ √© relevante para compras a mercado com saldo total
            if trade_amount <= 0:
                error_msg = "Saldo insuficiente em USDT ou erro ao consultar saldo para executar a ordem."
                logger.error(f"‚ùå {error_msg}")
                return jsonify({"error": error_msg}), 400
        
        # === FORMATA√á√ÉO PARA TERMOS DA BINANCE ===
        # Converte o par para o formato da Binance (ex: "BTCUSDT" sem barras)
        symbol_binance = pair.upper().replace("/", "") 
        # Converte o sinal para o formato da Binance ("BUY" ou "SELL")
        binance_side = signal.upper() 
        
        if binance_side not in ["BUY", "SELL"]:
            error_msg = f"Sinal inv√°lido: '{signal}'. Deve ser 'buy' ou 'sell'."
            logger.error(f"‚ùå {error_msg}")
            return jsonify({"error": error_msg}), 400

        # --- PREPARA√á√ÉO DOS PAR√ÇMETROS DA ORDEM PARA BINANCE ---
        order_params = {
            'symbol': symbol_binance,
            'side': binance_side,
            'type': Client.ORDER_TYPE_MARKET # Define o tipo de ordem como "Mercado"
        }

        if binance_side == "BUY":
            # Para uma ordem de COMPRA a mercado (BUY MARKET):
            # 'quoteOrderQty' √© o VALOR em USDT (moeda de cota√ß√£o) que voc√™ quer gastar.
            order_params['quoteOrderQty'] = f"{trade_amount:.8f}" # Formata para 8 casas decimais
            logger.info(f"Comprando {trade_amount:.8f} USDT de {symbol_binance} (ordem de mercado).")
        elif binance_side == "SELL":
            # Para uma ordem de VENDA a mercado (SELL MARKET):
            # 'quantity' √© a QUANTIDADE da moeda base (ex: BTC) que voc√™ quer vender.
            # ATEN√á√ÉO: Se seu sinal de VENDA com 'amount' vier em USDT, voc√™ precisa converter
            # para a quantidade da moeda base aqui, usando o pre√ßo de mercado atual.
            # Por simplicidade, este c√≥digo assume que 'trade_amount' para SELL J√Å √â a quantidade da moeda base.
            order_params['quantity'] = f"{trade_amount:.8f}" # Formata para 8 casas decimais
            logger.info(f"Vendendo {trade_amount:.8f} de {symbol_binance} (ordem de mercado).")

        logger.info("\nüì§ Enviando ordem para Binance:")
        logger.info(f"  ü™ô Par: {symbol_binance}")
        logger.info(f"  üìä Sinal: {binance_side}")
        logger.info(f"  üíµ Quantidade para API (quoteOrderQty/quantity): {trade_amount:.8f}")
        logger.info(f"  üì¶ Par√¢metros da Ordem: {json.dumps(order_params, indent=2)}")

        order_response = None
        # === ENVIO DA ORDEM USANDO M√âTODOS ESPEC√çFICOS DA BINANCE ===
        if binance_side == "BUY":
            order_response = binance_client.order_market_buy(**order_params)
        elif binance_side == "SELL":
            order_response = binance_client.order_market_sell(**order_params)
        
        logger.info(f"üì• Resposta COMPLETA da Binance: {json.dumps(order_response, indent=2)}")

        # Atualiza o status do bot
        status_data["ultimo_horario"] = datetime.now(tz).strftime("%Y-%m-%d %H:%M:%S")
        status_data["ultimo_sinal"] = f"{binance_side} {symbol_binance}"

        # Verifica se a ordem foi executada com sucesso (status 'FILLED')
        if order_response and order_response.get("status") == "FILLED":
            success_msg = f"‚úÖ ORDEM EXECUTADA com sucesso na Binance: {binance_side} {symbol_binance} com Order ID: {order_response.get('orderId')}. Pre√ßo m√©dio: {order_response.get('fills')[0].get('price') if order_response.get('fills') else 'N/A'}"
            logger.info(success_msg)
            return jsonify({"success": True, "message": success_msg, "response": order_response})
        else:
            # Caso a ordem n√£o seja FILLED imediatamente (ex: PARTIALLY_FILLED, CANCELED ou outro status)
            error_msg_binance = order_response.get('msg', 'Mensagem de erro desconhecida da Binance.') if order_response else "Nenhuma resposta da Binance."
            full_error_msg = f"‚ùå ERRO NA ORDEM na Binance. Status da ordem: {order_response.get('status', 'N/A')}. Mensagem da Binance: '{error_msg_binance}'"
            logger.error(full_error_msg)
            return jsonify({"error": full_error_msg, "response": order_response}), 400

    except BinanceAPIException as e:
        # Captura e loga erros espec√≠ficos da API da Binance (ex: saldo insuficiente, s√≠mbolo inv√°lido)
        full_error_msg = f"‚ùå ERRO DA API BINANCE: C√≥digo {e.code}, Mensagem: {e.message}"
        logger.error(full_error_msg)
        logger.error(traceback.format_exc()) 
        return jsonify({"error": full_error_msg, "code": e.code, "message": e.message}), 400
    except EnvironmentError as e:
        # Erro se as vari√°veis de ambiente n√£o estiverem configuradas
        logger.critical(f"[ERRO DE CONFIGURA√á√ÉO CR√çTICO] {e}")
        return jsonify({"error": str(e)}), 500
    except Exception as e:
        # Captura e loga quaisquer outros erros inesperados no c√≥digo do bot
        full_traceback = traceback.format_exc()
        logger.critical(f"[ERRO INTERNO INESPERADO DO BOT] {str(e)}\n{full_traceback}")
        return jsonify({"error": str(e), "traceback": full_traceback}), 500

# === EXECU√á√ÉO LOCAL (para testes no seu computador) ===
# Esta parte s√≥ √© executada se voc√™ rodar o script diretamente (n√£o na Render)
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    logger.info(f"üöÄ Bot Binance rodando na porta {port}. Verifique os logs na Render ap√≥s o deploy.")
    app.run(host="0.0.0.0", port=port, debug=True)
