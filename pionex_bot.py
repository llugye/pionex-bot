import os
import hmac
import hashlib
import requests
import json
from flask import Flask, request, jsonify
from datetime import datetime
import pytz
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import traceback # Para capturar o traceback completo em erros

# === CHAVES DE AMBIENTE ===
# Certifique-se de configurar estas vari√°veis no ambiente da Render
# Ex: API_KEY, API_SECRET, EMAIL_ORIGEM, EMAIL_DESTINO, EMAIL_SENHA, SMTP_SERVIDOR, SMTP_PORTA
API_KEY = os.getenv("API_KEY")
API_SECRET = os.getenv("API_SECRET")
BASE_URL = "https://api.pionex.com" # Base URL da API da Pionex

EMAIL_ORIGEM = os.getenv("EMAIL_ORIGEM")
EMAIL_DESTINO = os.getenv("EMAIL_DESTINO")
EMAIL_SENHA = os.getenv("EMAIL_SENHA")
SMTP_SERVIDOR = os.getenv("SMTP_SERVIDOR")
SMTP_PORTA = int(os.getenv("SMTP_PORTA", 587)) # Porta padr√£o para SMTP TLS

# === STATUS DO BOT ===
status_data = {
    "status": "online",
    "ultimo_horario": None,
    "ultimo_sinal": None,
    "versao": "1.0.4" # Vers√£o atualizada
}

app = Flask(__name__)
# Definir o fuso hor√°rio para Brasil/S√£o Paulo para logs e timestamps locais
tz = pytz.timezone('America/Sao_Paulo')

# === TIMESTAMP EM MILISSEGUNDOS ===
def get_timestamp() -> str:
    # Retorna o timestamp UTC em milissegundos como string, essencial para a assinatura
    return str(int(datetime.utcnow().timestamp() * 1000))

# === GERA ASSINATURA DA REQUISI√á√ÉO ===
# Esta fun√ß√£o √© crucial para a seguran√ßa e autentica√ß√£o da API.
# A mensagem para assinatura √© constru√≠da como: HTTP_METHOD + REQUEST_PATH + TIMESTAMP + REQUEST_BODY.
# O REQUEST_BODY √© a string JSON serializada para POST requests.
def sign_request(method: str, path: str, body: str = '') -> tuple:
    if not API_KEY or not API_SECRET:
        # Lan√ßa um erro claro se as chaves de API n√£o estiverem configuradas
        raise EnvironmentError("Erro: API_KEY ou API_SECRET n√£o definidos. Por favor, configure-as nas vari√°veis de ambiente da Render.")
    
    timestamp = get_timestamp()
    
    # Constr√≥i a string da mensagem para ser assinada.
    # Para POSTs com body (como a cria√ß√£o de ordem), o 'path' √© o caminho puro do endpoint.
    message = f"{method.upper()}{path}{timestamp}{body}"
    
    # Gera a assinatura HMAC SHA256 usando o API_SECRET
    signature = hmac.new(API_SECRET.encode('utf-8'), message.encode('utf-8'), hashlib.sha256).hexdigest()
    
    return timestamp, signature

# === ENVIA E-MAIL ===
# Fun√ß√£o para enviar notifica√ß√µes por e-mail sobre o status das ordens ou erros.
def enviar_email(assunto: str, corpo: str):
    # Verifica se todas as configura√ß√µes de e-mail necess√°rias est√£o presentes
    if not all([EMAIL_ORIGEM, EMAIL_DESTINO, EMAIL_SENHA, SMTP_SERVIDOR]):
        print("[AVISO] Configura√ß√µes de e-mail incompletas. E-mail de alerta n√£o ser√° enviado. Verifique suas vari√°veis de ambiente.")
        return
        
    try:
        msg = MIMEMultipart()
        msg['From'] = EMAIL_ORIGEM
        msg['To'] = EMAIL_DESTINO
        msg['Subject'] = assunto
        msg.attach(MIMEText(corpo, 'plain'))

        with smtplib.SMTP(SMTP_SERVIDOR, SMTP_PORTA) as servidor:
            servidor.starttls() # Inicia a conex√£o TLS (criptografada)
            servidor.login(EMAIL_ORIGEM, EMAIL_SENHA)
            servidor.sendmail(EMAIL_ORIGEM, EMAIL_DESTINO, msg.as_string())
        print(f"[EMAIL ENVIADO] Assunto: '{assunto}' para {EMAIL_DESTINO}")
    except Exception as e:
        print(f"[ERRO AO ENVIAR EMAIL] Ocorreu um erro: {e}")
        # Imprime o traceback completo para depura√ß√£o de problemas de e-mail
        print(traceback.format_exc()) 

# === CONSULTA SALDO DISPON√çVEL EM USDT ===
# Obt√©m o saldo de USDT na sua conta da Pionex.
def get_balance_usdt() -> float:
    try:
        method = "GET"
        path = "/api/v1/account/balances"
        # Para requisi√ß√µes GET de saldo, o 'body' da assinatura √© vazio
        timestamp, signature = sign_request(method, path, body='') 
        
        headers = {
            "PIONEX-KEY": API_KEY,
            "PIONEX-SIGNATURE": signature,
            "timestamp": timestamp
        }

        print(f"üîÑ Consultando saldo USDT em {BASE_URL + path}")
        response = requests.get(BASE_URL + path, headers=headers)
        response.raise_for_status() # Lan√ßa uma exce√ß√£o HTTPError para respostas de erro (4xx ou 5xx)

        data = response.json()

        if data.get("result"): # A Pionex retorna "result: true" para sucesso
            for coin in data["data"]["balances"]:
                if coin["coin"] == "USDT":
                    # Pega o saldo 'free' ou 'available', com fallback para "0"
                    valor = coin.get("free") or coin.get("available") or "0"
                    saldo = float(valor)
                    print(f"üí∞ Saldo dispon√≠vel em USDT: {saldo:.8f}") # Formata para 8 casas decimais
                    return saldo
            print("‚ùó Moeda USDT n√£o encontrada na lista de saldos recebida da Pionex.")
            return 0.0
        else:
            # Se 'result' n√£o for true, extrai e imprime a mensagem de erro da API
            error_msg_api = data.get('message', 'Mensagem de erro desconhecida da Pionex.')
            print(f"‚ùå Erro ao consultar saldo na Pionex: {error_msg_api}")
            enviar_email("‚ùå ERRO AO CONSULTAR SALDO", f"Erro da API Pionex: {error_msg_api}\nResposta Completa: {json.dumps(data, indent=2)}")
            return 0.0

    except requests.exceptions.RequestException as e:
        # Captura erros relacionados √† requisi√ß√£o HTTP (conex√£o, timeout, etc.)
        print(f"‚ùå Erro de requisi√ß√£o HTTP ao consultar saldo: {e}")
        enviar_email("‚ùå ERRO DE REQUISI√á√ÉO (SALDO)", str(e))
        return 0.0
    except Exception as e:
        # Captura outros erros inesperados durante o processamento do saldo
        print(f"‚ùå Erro inesperado ao processar saldo: {e}")
        print(traceback.format_exc()) # Imprime o traceback completo para depura√ß√£o
        enviar_email("‚ùå ERRO INTERNO (SALDO)", f"Erro inesperado: {str(e)}\n\nTraceback:\n{traceback.format_exc()}")
        return 0.0

# === ROTA DE STATUS ===
# Endpoint para verificar o status do bot.
@app.route("/status", methods=["GET"])
def status():
    # Atualiza o hor√°rio atual do servidor no fuso hor√°rio de S√£o Paulo para o status
    status_data["hora_servidor"] = datetime.now(tz).strftime("%Y-%m-%d %H:%M:%S")
    return jsonify(status_data)

# === ROTA PRINCIPAL /pionexbot ===
# Endpoint principal que recebe os sinais de compra/venda.
@app.route("/pionexbot", methods=["POST"])
def receive_signal():
    # Tenta obter o JSON do corpo da requisi√ß√£o. silent=True evita quebrar se n√£o for JSON.
    data = request.get_json(silent=True) 
    
    # Valida√ß√£o inicial: verifica se um JSON v√°lido foi recebido
    if not data:
        error_msg = "Nenhum dado JSON v√°lido recebido ou 'Content-Type' incorreto. Certifique-se de enviar 'application/json'."
        print(f"‚ùå {error_msg}")
        return jsonify({"error": error_msg}), 400

    pair = data.get("pair") # Par de negocia√ß√£o (ex: "BTCUSDT")
    signal = data.get("signal") # Tipo de sinal ("buy" ou "sell")
    amount_str = data.get("amount") # Quantidade (opcional, pode ser string ou float)
    
    print(f"\nüîî Sinal recebido: Par='{pair}', Sinal='{signal}', Quantidade='{amount_str}'")

    try:
        # Valida√ß√£o de par√¢metros obrigat√≥rios do sinal
        if not pair or not signal:
            error_msg = "Par√¢metros obrigat√≥rios ausentes: 'pair' ou 'signal'."
            print(f"‚ùå {error_msg}")
            return jsonify({"error": error_msg}), 400

        amount = 0.0
        if amount_str:
            try:
                amount = float(amount_str) # Tenta converter a quantidade para float
                if amount <= 0:
                    error_msg = "A quantidade 'amount' deve ser um valor positivo."
                    print(f"‚ùå {error_msg}")
                    return jsonify({"error": error_msg}), 400
            except ValueError:
                error_msg = f"A quantidade '{amount_str}' n√£o √© um n√∫mero v√°lido."
                print(f"‚ùå {error_msg}")
                return jsonify({"error": error_msg}), 400
        else:
            # Se 'amount' n√£o for fornecido no payload, tenta usar o saldo USDT total
            print("‚ÑπÔ∏è Quantidade n√£o especificada no sinal, consultando saldo USDT dispon√≠vel para a ordem de mercado...")
            amount = get_balance_usdt()
            if amount <= 0:
                error_msg = "Saldo insuficiente em USDT ou erro ao consultar saldo para executar a ordem."
                print(f"‚ùå {error_msg}")
                enviar_email("‚ùå SALDO INSUFICIENTE", error_msg)
                return jsonify({"error": error_msg}), 400
            
            # Recomenda-se adicionar uma margem de seguran√ßa ou verificar limites m√≠nimos de ordem da Pionex aqui.
            # Ex: Se a ordem m√≠nima for 10 USDT, e o saldo for 8, a ordem falharia.
            # amount = max(amount * 0.99, 10.0) # Exemplo: usar 99% do saldo ou no m√≠nimo 10 USDT

        method = "POST"
        path = "/api/v1/trade/order" # Endpoint da Pionex para criar ordens

        # Converte o sinal para mai√∫sculas ("BUY" ou "SELL"), conforme exigido pela Pionex
        pionex_side = signal.upper() 
        if pionex_side not in ["BUY", "SELL"]:
            error_msg = f"Sinal inv√°lido: '{signal}'. Deve ser 'buy' ou 'sell'."
            print(f"‚ùå {error_msg}")
            return jsonify({"error": error_msg}), 400

        # Monta o corpo da requisi√ß√£o JSON para a API da Pionex.
        # "quoteOrderQty" indica uma ordem de mercado pelo valor total na moeda de cota√ß√£o (USDT).
        body_dict = {
            "symbol": pair.upper(), # S√≠mbolo do par em mai√∫sculas (ex: "BTCUSDT")
            "side": pionex_side,
            "quoteOrderQty": f"{amount:.8f}" # Quantidade de USDT para gastar/receber, formatado como string
        }
        body_json = json.dumps(body_dict) # Serializa o dicion√°rio Python para uma string JSON

        # GERA A ASSINATURA: Passa o m√©todo, o caminho e o corpo JSON serializado.
        # Esta assinatura garante a autenticidade e integridade da requisi√ß√£o.
        timestamp, signature = sign_request(method, path, body=body_json)

        # Monta os cabe√ßalhos HTTP necess√°rios para a autentica√ß√£o e tipo de conte√∫do
        headers = {
            "PIONEX-KEY": API_KEY,
            "PIONEX-SIGNATURE": signature,
            "timestamp": timestamp,
            "Content-Type": "application/json" # Informa que o corpo da requisi√ß√£o √© JSON
        }

        print("\nüì§ Enviando ordem para Pionex:")
        print(f"  ü™ô Par: {pair.upper()}")
        print(f"  üìä Sinal: {pionex_side}")
        print(f"  üíµ Quantidade (USDT): {amount:.8f}")
        print(f"  üì¶ Payload (assinado): {body_json}")
        # Para seguran√ßa, apenas as primeiras partes das chaves/assinaturas s√£o impressas
        print(f"  PIONEX-KEY (in√≠cio): {API_KEY[:5]}...") 
        print(f"  PIONEX-SIGNATURE (in√≠cio): {signature[:10]}...") 
        print(f"  Timestamp: {timestamp}")

        # Realiza a requisi√ß√£o POST para a API da Pionex.
        # Crucial: usa 'data=body_json' para enviar a STRING JSON bruta que foi assinada,
        # e n√£o 'json=body_dict' que serializaria novamente.
        response = requests.post(BASE_URL + path, headers=headers, data=body_json)
        
        # Imprime a resposta bruta da API da Pionex nos logs, essencial para depura√ß√£o
        print(f"üì• Resposta BRUTA da Pionex: Status={response.status_code}, Corpo={response.text}")

        res_json = {} # Inicializa para garantir que sempre seja um dicion√°rio
        try:
            res_json = response.json() # Tenta decodificar a resposta como JSON
        except requests.exceptions.JSONDecodeError:
            # Se a resposta n√£o for um JSON v√°lido, registra o erro e a resposta bruta
            print("‚ö†Ô∏è A resposta da Pionex N√ÉO √â UM JSON v√°lido. Isso pode indicar um erro grave na requisi√ß√£o ou na API.")
            res_json = {"error": "Resposta da API Pionex n√£o √© JSON v√°lido.", "raw_response": response.text}
        except Exception as e:
            # Captura outras exce√ß√µes inesperadas ao tentar decodificar o JSON
            print(f"‚ö†Ô∏è Erro inesperado ao decodificar JSON da resposta da Pionex: {e}")
            res_json = {"error": "Erro inesperado ao decodificar JSON da Pionex.", "raw_response": response.text}

        # Atualiza os dados de status do bot para monitoramento
        status_data["ultimo_horario"] = datetime.now(tz).strftime("%Y-%m-%d %H:%M:%S")
        status_data["ultimo_sinal"] = f"{pionex_side} {pair.upper()}"

        # Verifica o resultado da ordem com base no status HTTP e no campo "result" do JSON
        if response.status_code == 200 and res_json.get("result"):
            success_msg = f"‚úÖ ORDEM EXECUTADA com sucesso: {pionex_side} {pair.upper()} com {amount:.8f} USDT."
            print(success_msg)
            enviar_email("‚úÖ ORDEM EXECUTADA", success_msg + f"\nDetalhes da Ordem: {json.dumps(res_json, indent=2)}")
            return jsonify({"success": True, "message": success_msg, "response": res_json})
        else:
            # Se a ordem falhou (status n√£o 200 ou "result" falso), registra o erro
            error_msg_api = res_json.get('message', 'Nenhuma mensagem de erro espec√≠fica da Pionex.')
            full_error_msg = f"‚ùå ERRO NA ORDEM: {pionex_side} {pair.upper()}. Status HTTP: {response.status_code}. Mensagem da Pionex: '{error_msg_api}'"
            print(full_error_msg)
            enviar_email("‚ùå ERRO NA ORDEM", full_error_msg + f"\nResposta Completa da Pionex: {json.dumps(res_json, indent=2)}")
            # Retorna o status code original da Pionex se for um erro de cliente/servidor (4xx/5xx), sen√£o 400
            return jsonify({"error": res_json}), response.status_code if response.status_code >= 400 else 400

    except EnvironmentError as e:
        # Erro espec√≠fico para chaves de API n√£o configuradas
        print(f"[ERRO DE CONFIGURA√á√ÉO] {e}")
        enviar_email("‚ùå ERRO DE CONFIGURA√á√ÉO", str(e))
        return jsonify({"error": str(e)}), 500
    except requests.exceptions.RequestException as e:
        # Erros de conex√£o ou requisi√ß√£o HTTP para a API externa
        print(f"[ERRO DE CONEX√ÉO] Erro ao conectar √† API da Pionex: {e}")
        enviar_email("‚ùå ERRO DE CONEX√ÉO", f"Erro ao conectar √† Pionex: {str(e)}")
        return jsonify({"error": f"Erro de conex√£o com a Pionex: {e}"}), 500
    except Exception as e:
        # Captura qualquer outro erro inesperado no fluxo principal do bot
        full_traceback = traceback.format_exc() # Obt√©m o traceback completo da exce√ß√£o
        print(f"[ERRO INTERNO INESPERADO DO BOT] {str(e)}\n{full_traceback}")
        enviar_email("‚ùå ERRO INTERNO DO BOT", f"Um erro inesperado ocorreu:\n{str(e)}\n\nTraceback:\n{full_traceback}")
        return jsonify({"error": str(e), "traceback": full_traceback}), 500

# === EXECU√á√ÉO LOCAL ===
if __name__ == "__main__":
    # Bloco para execu√ß√£o local do bot.
    # Em ambiente de produ√ß√£o (Render), as vari√°veis de ambiente s√£o definidas externamente.
    # Para testes locais, voc√™ pode descomentar e preencher as vari√°veis abaixo:
    # os.environ["API_KEY"] = "SUA_API_KEY_AQUI"
    # os.environ["API_SECRET"] = "SUA_API_SECRET_AQUI"
    # os.environ["EMAIL_ORIGEM"] = "seu_email@dominio.com"
    # os.environ["EMAIL_DESTINO"] = "email_destino@dominio.com"
    # os.environ["EMAIL_SENHA"] = "sua_senha_de_email"
    # os.environ["SMTP_SERVIDOR"] = "smtp.gmail.com" # Exemplo: smtp.gmail.com, smtp.outlook.com
    # os.environ["SMTP_PORTA"] = "587" # Porta padr√£o para TLS

    # A porta para o servidor Flask √© lida da vari√°vel de ambiente "PORT" (Render)
    # ou padr√£o 10000 para execu√ß√£o local.
    port = int(os.environ.get("PORT", 10000))
    print(f"üöÄ Bot Pionex rodando na porta {port}. Verifique os logs na Render ap√≥s o deploy.")
    # DEBUG=TRUE Adicionado para ajudar a ver mais logs durante a depura√ß√£o.
    # Lembre-se de REMOVER isso para ambiente de produ√ß√£o!
    app.run(host="0.0.0.0", port=port, debug=True)
